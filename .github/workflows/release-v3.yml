name: Manual Semantic Release and Build

on:
  workflow_dispatch:

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      # Inline install of semantic-release packages (as per your new configuration)
      - name: Install semantic-release and plugins
        run: |
          pnpm add -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/npm semantic-release-monorepo

      # Run semantic-release in dry-run mode to get the version number
      - name: Semantic Release Dry Run
        id: semantic_dry_run
        run: |
          VERSION=$(npx semantic-release --dry-run | grep "next release version" | cut -d' ' -f5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Output the new release version for visibility
      - name: Output new release version
        run: echo "New version is ${{ env.VERSION }}"

      # Build related steps using the new version
      - name: Set desktop app package version
        run: pnpm pkg set version=${{ env.VERSION }} --prefix apps/sentry-client-desktop

      - name: Set CLI version
        run: sed -i'' -e 's/VERSION_NUMBER/${{ env.VERSION }}/g' packages/core/src/utils/version.ts

      - name: Build monorepo
        run: npx nx run-many --target=build --all

      - name: Upload sentry-client-desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-desktop-${{ matrix.os }}
          path: apps/sentry-client-desktop/release

      - name: Zip CLI artifacts
        run: |
          cd apps/cli/release
          zip sentry-node-cli-macos.zip sentry-node-cli-macos
          zip sentry-node-cli-linux.zip sentry-node-cli-linux
          zip sentry-node-cli-windows.zip sentry-node-cli-win.exe
        if: matrix.os == 'ubuntu-latest'

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-cli-${{ matrix.os }}
          path: apps/cli/release

  checksum-and-release:
    needs: release
    runs-on: macos-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate checksum
        run: |
          CHECKSUM=$(shasum -a 512 release-desktop-windows-latest/sentry-client-windows.exe | cut -f1 -d\ | xxd -r -p | base64)
          CHECKSUM=$(echo "$CHECKSUM" | tr -d '\r\n')
          echo "SHA512 Checksum: $CHECKSUM"
          cat release-desktop-windows-latest/latest.yml
          sed -i '' -e "s#^sha512:.*#sha512: $CHECKSUM#" "release-desktop-windows-latest/latest.yml"
          sed -i '' -e "s#^    sha512:.*#    sha512: $CHECKSUM#" "release-desktop-windows-latest/latest.yml"

      # Run semantic-release after the build is completed to publish the release
      - name: Semantic Release Final
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output new release information
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "New release version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "Major: ${{ steps.semantic.outputs.new_release_major_version }}"
          echo "Minor: ${{ steps.semantic.outputs.new_release_minor_version }}"
          echo "Patch: ${{ steps.semantic.outputs.new_release_patch_version }}"
