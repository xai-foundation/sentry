type PoolInfo @entity(immutable: false) {
  id: String!
  address: Bytes! @index
  owner: Bytes!
  delegateAddress: Bytes!
  totalStakedEsXaiAmount: BigInt! @index
  totalStakedKeyAmount: BigInt!
  ownerShare: BigInt!
  keyBucketShare: BigInt!
  stakedBucketShare: BigInt!
  updateSharesTimestamp: BigInt!
  pendingShares: [BigInt!]!
  metadata: [String!]!
  socials: [String!]!
  ownerStakedKeys: BigInt!
  ownerRequestedUnstakeKeyAmount: BigInt!
  ownerLatestUnstakeRequestCompletionTime: BigInt!
  createdTimestamp: BigInt!
  poolChallenges: [PoolChallenge!]! @derivedFrom(field: "pool")
  submissions: [PoolSubmission!]! @derivedFrom(field: "poolInfo")
}

type UnstakeRequest @entity(immutable: false) {
  id: String!
  user: Bytes!
  pool: Bytes!
  index: BigInt!
  amount: BigInt!
  isKey: Boolean!
  open: Boolean!
  lockTime: BigInt!
  completeTime: BigInt!
}

# global delayperiods in entity might be problematic as event is not on initialize and therefore might not be created at all
type PoolFactoryConfig @entity(immutable: false) {
  id: String!
  version: BigInt!
  unstakeKeysDelayPeriod: BigInt!
  unstakeGenesisKeyDelayPeriod: BigInt!
  unstakeEsXaiDelayPeriod: BigInt!
  updateRewardBreakdownDelayPeriod: BigInt!
}

type PoolChallenge @entity(immutable: false) {
  id: String!
  pool: PoolInfo!
  challenge: Challenge! @index
  submittedKeyCount: BigInt!
  claimKeyCount: BigInt!
  totalStakedEsXaiAmount: BigInt!
  totalStakedKeyAmount: BigInt!
  totalClaimedEsXaiAmount: BigInt!
  eligibleSubmissionsCount: BigInt!
}

type PoolStake @entity(immutable: false) {
  id: String!
  pool: PoolInfo!
  wallet: SentryWallet! @index
  keyStakeAmount: BigInt!
  esXaiStakeAmount: BigInt!
}