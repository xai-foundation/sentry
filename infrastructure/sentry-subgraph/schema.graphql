
################################################################################
# AUTO-GENERATED FILE NOTICE                                                   #
################################################################################
# File: This is an auto-generated file combining GraphQL schema files from the #
# 'schema' directory.                                                          #
#                                                                              #
# Purpose: Attempts to use conventional methods for combining GraphQL schemas, #
# such as commented import statements or tools designed for non-web3 GraphQL   #
# libraries, were unsuccessful due to compatibility issues with The Graph's    #
# specific GraphQL types and lack of clear documentation.                      #
#                                                                              #
# Method: This workaround involves using a JavaScript file to programmatically #
# merge all schema files. Suggestions for more efficient methods to organize   #
# and combine large GraphQL schemas are welcome.                               #
################################################################################



##########################################################
# esXai.graphql                                          #
# schema\events\esXai.graphql                            #
##########################################################

type RedemptionRequest @entity(immutable: false) {
    id: String!
    sentryWallet: SentryWallet! @index # User address, must match the address field in SentryWallet
    index: BigInt!
    amount: BigInt!
    startTime: BigInt!
    endTime: BigInt!
    claimableTime: BigInt!
    duration: BigInt!
    completed: Boolean!
    cancelled: Boolean!
    voucherIssued: Boolean!
}

######################################################################
# NodeLicense.graphql                                                #
# schema\events\NodeLicense.graphql                                  #
######################################################################
type SentryKey @entity(immutable: false) {
  id: String!
  owner: Bytes! # address
  sentryWallet: SentryWallet!
  keyId: BigInt!
  mintTimeStamp: BigInt!
  assignedPool: Bytes! # address
  submissions: [Submission!]! @derivedFrom(field: "sentryKey")
}

######################################################################
# PoolFactory.graphql                                                #
# schema\events\PoolFactory.graphql                                  #
######################################################################
type PoolInfo @entity(immutable: false) {
  id: String!
  address: Bytes! @index
  owner: Bytes!
  delegateAddress: Bytes!
  totalStakedEsXaiAmount: BigInt! @index
  totalStakedKeyAmount: BigInt!
  ownerShare: BigInt!
  keyBucketShare: BigInt!
  stakedBucketShare: BigInt!
  updateSharesTimestamp: BigInt!
  pendingShares: [BigInt!]!
  metadata: [String!]!
  socials: [String!]!
  ownerStakedKeys: BigInt!
  ownerRequestedUnstakeKeyAmount: BigInt!
  ownerLatestUnstakeRequestCompletionTime: BigInt!
  createdTimestamp: BigInt!
  poolChallenges: [PoolChallenge!]! @derivedFrom(field: "pool")
  submissions: [BulkSubmission!]! @derivedFrom(field: "poolInfo")
}

type UnstakeRequest @entity(immutable: false) {
  id: String!
  user: Bytes!
  pool: Bytes!
  index: BigInt!
  amount: BigInt!
  isKey: Boolean!
  open: Boolean!
  lockTime: BigInt!
  completeTime: BigInt!
}

# global delayperiods in entity might be problematic as event is not on initialize and therefore might not be created at all
type PoolFactoryConfig @entity(immutable: false) {
  id: String!
  version: BigInt!
  unstakeKeysDelayPeriod: BigInt!
  unstakeGenesisKeyDelayPeriod: BigInt!
  unstakeEsXaiDelayPeriod: BigInt!
  updateRewardBreakdownDelayPeriod: BigInt!
}

type PoolChallenge @entity(immutable: false) {
  id: String!
  pool: PoolInfo!
  challenge: Challenge! @index
  submittedKeyCount: BigInt!
  claimKeyCount: BigInt!
  totalStakedEsXaiAmount: BigInt!
  totalStakedKeyAmount: BigInt!
  totalClaimedEsXaiAmount: BigInt!
  eligibleSubmissionsCount: BigInt!
}

type PoolStake @entity(immutable: false) {
  id: String!
  pool: PoolInfo!
  wallet: SentryWallet! @index
  keyStakeAmount: BigInt!
  esXaiStakeAmount: BigInt!
}

##############################################################
# Referee.graphql                                            #
# schema\events\Referee.graphql                              #
##############################################################
enum ChallengeStatus {
  OpenForSubmissions
  OpenForClaims
  Expired
}

type Challenge @entity(immutable: false) {
  id: String!
  challengeNumber: BigInt! @index # uint256
  status: ChallengeStatus!
  assertionId: BigInt! # uint256
  assertionStateRootOrConfirmData: Bytes! # bytes
  assertionTimestamp: BigInt! @index # uint64
  challengerSignedHash: Bytes! # bytes
  activeChallengerPublicKey: Bytes! # bytes
  rollupUsed: Bytes! # address
  createdTimestamp: BigInt! # uint256
  totalSupplyOfNodesAtChallengeStart: BigInt! # uint256
  rewardAmountForClaimers: BigInt! # uint256
  amountForGasSubsidy: BigInt! # uint256
  numberOfEligibleClaimers: BigInt! # uint256
  amountClaimedByClaimers: BigInt! # uint256
  submissions: [Submission!]! @derivedFrom(field: "challenge")
  bulkSubmissions: [BulkSubmission!]! @derivedFrom(field: "challenge")
}

enum SubmittedFrom {
  submitAssertion
  submitMultipleAssertions
  unknown
}

enum ClaimedFrom {
  claimRewards
  claimMultipleRewards
  unclaimed
  unknown
}

type Submission @entity(immutable: false) {
  id: String!
  challengeNumber: BigInt! @index
  claimed: Boolean!
  eligibleForPayout: Boolean!
  nodeLicenseId: BigInt! @index
  assertionsStateRootOrConfirmData: String!
  claimAmount: BigInt!
  createdTimestamp: BigInt!
  claimTimestamp: BigInt!
  createdTxHash: Bytes!
  claimTxHash: Bytes!
  sentryKey: SentryKey!
  challenge: Challenge!
  submittedFrom: SubmittedFrom!
  claimedFrom: ClaimedFrom!
}

type SentryWallet @entity(immutable: false) {
  id: String!
  isKYCApproved: Boolean!
  address: Bytes! @index
  approvedOperators: [Bytes!]!
  v1EsXaiStakeAmount: BigInt!
  esXaiStakeAmount: BigInt!
  keyCount: BigInt!
  stakedKeyCount: BigInt!
  esXaiBalance: BigInt!
  sentryKeys: [SentryKey!]! @derivedFrom(field: "sentryWallet")
  poolStakes: [PoolStake!]! @derivedFrom(field: "wallet")
  bulkSubmissions: [BulkSubmission!]! @derivedFrom(field: "sentryWallet")
  redemptions: [RedemptionRequest!]! @derivedFrom(field: "sentryWallet")
}

type RefereeConfig @entity(immutable: false) {
  id: String!
  version: BigInt!
  maxStakeAmountPerLicense: BigInt!
  maxKeysPerPool: BigInt!
  stakeAmountTierThresholds: [BigInt!]!
  stakeAmountBoostFactors: [BigInt!]!
}

type BulkSubmission @entity(immutable: false) {
  id: String!
  challengeId: BigInt! @index
  bulkAddress: Bytes! @index
  challenge: Challenge!
  poolInfo: PoolInfo
  keyCount: BigInt!
  winningKeyCount: BigInt!
  claimedRewardsAmount: BigInt!
  createdTimestamp: BigInt! @index
  createdTxHash: Bytes!
  claimTimestamp: BigInt!
  claimTxHash: Bytes!
  claimed: Boolean! @index
  sentryWallet: SentryWallet
  isPool: Boolean! @index
}


######################################################
# Xai.graphql                                        #
# schema\events\Xai.graphql                          #
######################################################
type ConvertedToEsXaiEvent @entity(immutable: true) {
    id: Bytes!
    user: Bytes! # address
    amount: BigInt!
    timestamp: BigInt!
}

