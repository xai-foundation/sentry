// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AssertionCancelled extends ethereum.Event {
  get params(): AssertionCancelled__Params {
    return new AssertionCancelled__Params(this);
  }
}

export class AssertionCancelled__Params {
  _event: AssertionCancelled;

  constructor(event: AssertionCancelled) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeLicenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AssertionCheckingToggled extends ethereum.Event {
  get params(): AssertionCheckingToggled__Params {
    return new AssertionCheckingToggled__Params(this);
  }
}

export class AssertionCheckingToggled__Params {
  _event: AssertionCheckingToggled;

  constructor(event: AssertionCheckingToggled) {
    this._event = event;
  }

  get newState(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class AssertionSubmitted extends ethereum.Event {
  get params(): AssertionSubmitted__Params {
    return new AssertionSubmitted__Params(this);
  }
}

export class AssertionSubmitted__Params {
  _event: AssertionSubmitted;

  constructor(event: AssertionSubmitted) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeLicenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AssertionSubmittedV2 extends ethereum.Event {
  get params(): AssertionSubmittedV2__Params {
    return new AssertionSubmittedV2__Params(this);
  }
}

export class AssertionSubmittedV2__Params {
  _event: AssertionSubmittedV2;

  constructor(event: AssertionSubmittedV2) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeLicenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assertionStateRootOrConfirmData(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get eligibleForPayout(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class BatchRewardsClaimed extends ethereum.Event {
  get params(): BatchRewardsClaimed__Params {
    return new BatchRewardsClaimed__Params(this);
  }
}

export class BatchRewardsClaimed__Params {
  _event: BatchRewardsClaimed;

  constructor(event: BatchRewardsClaimed) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get keysLength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChallengeClosed extends ethereum.Event {
  get params(): ChallengeClosed__Params {
    return new ChallengeClosed__Params(this);
  }
}

export class ChallengeClosed__Params {
  _event: ChallengeClosed;

  constructor(event: ChallengeClosed) {
    this._event = event;
  }

  get challengeNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChallengeExpired extends ethereum.Event {
  get params(): ChallengeExpired__Params {
    return new ChallengeExpired__Params(this);
  }
}

export class ChallengeExpired__Params {
  _event: ChallengeExpired;

  constructor(event: ChallengeExpired) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChallengeSubmitted extends ethereum.Event {
  get params(): ChallengeSubmitted__Params {
    return new ChallengeSubmitted__Params(this);
  }
}

export class ChallengeSubmitted__Params {
  _event: ChallengeSubmitted;

  constructor(event: ChallengeSubmitted) {
    this._event = event;
  }

  get challengeNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChallengerPublicKeyChanged extends ethereum.Event {
  get params(): ChallengerPublicKeyChanged__Params {
    return new ChallengerPublicKeyChanged__Params(this);
  }
}

export class ChallengerPublicKeyChanged__Params {
  _event: ChallengerPublicKeyChanged;

  constructor(event: ChallengerPublicKeyChanged) {
    this._event = event;
  }

  get newChallengerPublicKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class InvalidBatchSubmission extends ethereum.Event {
  get params(): InvalidBatchSubmission__Params {
    return new InvalidBatchSubmission__Params(this);
  }
}

export class InvalidBatchSubmission__Params {
  _event: InvalidBatchSubmission;

  constructor(event: InvalidBatchSubmission) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get keysLength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InvalidSubmission extends ethereum.Event {
  get params(): InvalidSubmission__Params {
    return new InvalidSubmission__Params(this);
  }
}

export class InvalidSubmission__Params {
  _event: InvalidSubmission;

  constructor(event: InvalidSubmission) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeLicenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KycStatusChanged extends ethereum.Event {
  get params(): KycStatusChanged__Params {
    return new KycStatusChanged__Params(this);
  }
}

export class KycStatusChanged__Params {
  _event: KycStatusChanged;

  constructor(event: KycStatusChanged) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isKycApproved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NewPoolSubmission extends ethereum.Event {
  get params(): NewPoolSubmission__Params {
    return new NewPoolSubmission__Params(this);
  }
}

export class NewPoolSubmission__Params {
  _event: NewPoolSubmission;

  constructor(event: NewPoolSubmission) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakedKeys(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningKeys(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NodeLicenseAddressChanged extends ethereum.Event {
  get params(): NodeLicenseAddressChanged__Params {
    return new NodeLicenseAddressChanged__Params(this);
  }
}

export class NodeLicenseAddressChanged__Params {
  _event: NodeLicenseAddressChanged;

  constructor(event: NodeLicenseAddressChanged) {
    this._event = event;
  }

  get newNodeLicenseAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolRewardsClaimed extends ethereum.Event {
  get params(): PoolRewardsClaimed__Params {
    return new PoolRewardsClaimed__Params(this);
  }
}

export class PoolRewardsClaimed__Params {
  _event: PoolRewardsClaimed;

  constructor(event: PoolRewardsClaimed) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningKeys(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardsClaimedV2 extends ethereum.Event {
  get params(): RewardsClaimedV2__Params {
    return new RewardsClaimedV2__Params(this);
  }
}

export class RewardsClaimedV2__Params {
  _event: RewardsClaimedV2;

  constructor(event: RewardsClaimedV2) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeLicenseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RollupAddressChanged extends ethereum.Event {
  get params(): RollupAddressChanged__Params {
    return new RollupAddressChanged__Params(this);
  }
}

export class RollupAddressChanged__Params {
  _event: RollupAddressChanged;

  constructor(event: RollupAddressChanged) {
    this._event = event;
  }

  get newRollupAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakedV1 extends ethereum.Event {
  get params(): StakedV1__Params {
    return new StakedV1__Params(this);
  }
}

export class StakedV1__Params {
  _event: StakedV1;

  constructor(event: StakedV1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingEnabled extends ethereum.Event {
  get params(): StakingEnabled__Params {
    return new StakingEnabled__Params(this);
  }
}

export class StakingEnabled__Params {
  _event: StakingEnabled;

  constructor(event: StakingEnabled) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UnstakeV1 extends ethereum.Event {
  get params(): UnstakeV1__Params {
    return new UnstakeV1__Params(this);
  }
}

export class UnstakeV1__Params {
  _event: UnstakeV1;

  constructor(event: UnstakeV1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMaxKeysPerPool extends ethereum.Event {
  get params(): UpdateMaxKeysPerPool__Params {
    return new UpdateMaxKeysPerPool__Params(this);
  }
}

export class UpdateMaxKeysPerPool__Params {
  _event: UpdateMaxKeysPerPool;

  constructor(event: UpdateMaxKeysPerPool) {
    this._event = event;
  }

  get prevAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMaxStakeAmount extends ethereum.Event {
  get params(): UpdateMaxStakeAmount__Params {
    return new UpdateMaxStakeAmount__Params(this);
  }
}

export class UpdateMaxStakeAmount__Params {
  _event: UpdateMaxStakeAmount;

  constructor(event: UpdateMaxStakeAmount) {
    this._event = event;
  }

  get prevAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatePoolSubmission extends ethereum.Event {
  get params(): UpdatePoolSubmission__Params {
    return new UpdatePoolSubmission__Params(this);
  }
}

export class UpdatePoolSubmission__Params {
  _event: UpdatePoolSubmission;

  constructor(event: UpdatePoolSubmission) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakedKeys(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningKeys(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get increase(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get decrease(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Referee__calculateChallengeEmissionAndTierResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Referee__challengesResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: Bytes;
  value4: BigInt;
  value5: Bytes;
  value6: Bytes;
  value7: Address;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;
  value13: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: Bytes,
    value4: BigInt,
    value5: Bytes,
    value6: Bytes,
    value7: Address,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
    value13: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBytes(this.value5));
    map.set("value6", ethereum.Value.fromBytes(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }

  getOpenForSubmissions(): boolean {
    return this.value0;
  }

  getExpiredForRewarding(): boolean {
    return this.value1;
  }

  getAssertionId(): BigInt {
    return this.value2;
  }

  getAssertionStateRootOrConfirmData(): Bytes {
    return this.value3;
  }

  getAssertionTimestamp(): BigInt {
    return this.value4;
  }

  getChallengerSignedHash(): Bytes {
    return this.value5;
  }

  getActiveChallengerPublicKey(): Bytes {
    return this.value6;
  }

  getRollupUsed(): Address {
    return this.value7;
  }

  getCreatedTimestamp(): BigInt {
    return this.value8;
  }

  getTotalSupplyOfNodesAtChallengeStart(): BigInt {
    return this.value9;
  }

  getRewardAmountForClaimers(): BigInt {
    return this.value10;
  }

  getAmountForGasSubsidy(): BigInt {
    return this.value11;
  }

  getNumberOfEligibleClaimers(): BigInt {
    return this.value12;
  }

  getAmountClaimedByClaimers(): BigInt {
    return this.value13;
  }
}

export class Referee__createAssertionHashAndCheckPayoutResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Referee__getChallengeResultValue0Struct extends ethereum.Tuple {
  get openForSubmissions(): boolean {
    return this[0].toBoolean();
  }

  get expiredForRewarding(): boolean {
    return this[1].toBoolean();
  }

  get assertionId(): BigInt {
    return this[2].toBigInt();
  }

  get assertionStateRootOrConfirmData(): Bytes {
    return this[3].toBytes();
  }

  get assertionTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get challengerSignedHash(): Bytes {
    return this[5].toBytes();
  }

  get activeChallengerPublicKey(): Bytes {
    return this[6].toBytes();
  }

  get rollupUsed(): Address {
    return this[7].toAddress();
  }

  get createdTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get totalSupplyOfNodesAtChallengeStart(): BigInt {
    return this[9].toBigInt();
  }

  get rewardAmountForClaimers(): BigInt {
    return this[10].toBigInt();
  }

  get amountForGasSubsidy(): BigInt {
    return this[11].toBigInt();
  }

  get numberOfEligibleClaimers(): BigInt {
    return this[12].toBigInt();
  }

  get amountClaimedByClaimers(): BigInt {
    return this[13].toBigInt();
  }
}

export class Referee__getSubmissionsForChallengesResultValue0Struct extends ethereum.Tuple {
  get submitted(): boolean {
    return this[0].toBoolean();
  }

  get claimed(): boolean {
    return this[1].toBoolean();
  }

  get eligibleForPayout(): boolean {
    return this[2].toBoolean();
  }

  get nodeLicenseId(): BigInt {
    return this[3].toBigInt();
  }

  get assertionStateRootOrConfirmData(): Bytes {
    return this[4].toBytes();
  }
}

export class Referee__poolSubmissionsResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getSubmitted(): boolean {
    return this.value0;
  }

  getClaimed(): boolean {
    return this.value1;
  }

  getStakedKeyCount(): BigInt {
    return this.value2;
  }

  getWinningKeyCount(): BigInt {
    return this.value3;
  }

  getAssertionStateRootOrConfirmData(): Bytes {
    return this.value4;
  }
}

export class Referee__submissionsResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: BigInt,
    value4: Bytes,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getSubmitted(): boolean {
    return this.value0;
  }

  getClaimed(): boolean {
    return this.value1;
  }

  getEligibleForPayout(): boolean {
    return this.value2;
  }

  getNodeLicenseId(): BigInt {
    return this.value3;
  }

  getAssertionStateRootOrConfirmData(): Bytes {
    return this.value4;
  }
}

export class Referee extends ethereum.SmartContract {
  static bind(address: Address): Referee {
    return new Referee("Referee", address);
  }

  CHALLENGER_ROLE(): Bytes {
    let result = super.call(
      "CHALLENGER_ROLE",
      "CHALLENGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CHALLENGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHALLENGER_ROLE",
      "CHALLENGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  KYC_ADMIN_ROLE(): Bytes {
    let result = super.call("KYC_ADMIN_ROLE", "KYC_ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_KYC_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "KYC_ADMIN_ROLE",
      "KYC_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _lifetimeClaims(param0: Address): BigInt {
    let result = super.call(
      "_lifetimeClaims",
      "_lifetimeClaims(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try__lifetimeClaims(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_lifetimeClaims",
      "_lifetimeClaims(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assignedKeyToPool(param0: BigInt): Address {
    let result = super.call(
      "assignedKeyToPool",
      "assignedKeyToPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_assignedKeyToPool(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assignedKeyToPool",
      "assignedKeyToPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assignedKeysOfUserCount(param0: Address): BigInt {
    let result = super.call(
      "assignedKeysOfUserCount",
      "assignedKeysOfUserCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_assignedKeysOfUserCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignedKeysOfUserCount",
      "assignedKeysOfUserCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assignedKeysToPoolCount(param0: Address): BigInt {
    let result = super.call(
      "assignedKeysToPoolCount",
      "assignedKeysToPoolCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_assignedKeysToPoolCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignedKeysToPoolCount",
      "assignedKeysToPoolCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateChallengeEmissionAndTier(): Referee__calculateChallengeEmissionAndTierResult {
    let result = super.call(
      "calculateChallengeEmissionAndTier",
      "calculateChallengeEmissionAndTier():(uint256,uint256)",
      [],
    );

    return new Referee__calculateChallengeEmissionAndTierResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_calculateChallengeEmissionAndTier(): ethereum.CallResult<Referee__calculateChallengeEmissionAndTierResult> {
    let result = super.tryCall(
      "calculateChallengeEmissionAndTier",
      "calculateChallengeEmissionAndTier():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Referee__calculateChallengeEmissionAndTierResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  challengeCounter(): BigInt {
    let result = super.call(
      "challengeCounter",
      "challengeCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_challengeCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengeCounter",
      "challengeCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengerPublicKey(): Bytes {
    let result = super.call(
      "challengerPublicKey",
      "challengerPublicKey():(bytes)",
      [],
    );

    return result[0].toBytes();
  }

  try_challengerPublicKey(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "challengerPublicKey",
      "challengerPublicKey():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  challenges(param0: BigInt): Referee__challengesResult {
    let result = super.call(
      "challenges",
      "challenges(uint256):(bool,bool,uint64,bytes32,uint64,bytes,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Referee__challengesResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toBytes(),
      result[6].toBytes(),
      result[7].toAddress(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBigInt(),
    );
  }

  try_challenges(
    param0: BigInt,
  ): ethereum.CallResult<Referee__challengesResult> {
    let result = super.tryCall(
      "challenges",
      "challenges(uint256):(bool,bool,uint64,bytes32,uint64,bytes,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Referee__challengesResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toBytes(),
        value[6].toBytes(),
        value[7].toAddress(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBigInt(),
      ),
    );
  }

  createAssertionHashAndCheckPayout(
    _nodeLicenseId: BigInt,
    _challengeId: BigInt,
    _boostFactor: BigInt,
    _confirmData: Bytes,
    _challengerSignedHash: Bytes,
  ): Referee__createAssertionHashAndCheckPayoutResult {
    let result = super.call(
      "createAssertionHashAndCheckPayout",
      "createAssertionHashAndCheckPayout(uint256,uint256,uint256,bytes,bytes):(bool,bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_nodeLicenseId),
        ethereum.Value.fromUnsignedBigInt(_challengeId),
        ethereum.Value.fromUnsignedBigInt(_boostFactor),
        ethereum.Value.fromBytes(_confirmData),
        ethereum.Value.fromBytes(_challengerSignedHash),
      ],
    );

    return new Referee__createAssertionHashAndCheckPayoutResult(
      result[0].toBoolean(),
      result[1].toBytes(),
    );
  }

  try_createAssertionHashAndCheckPayout(
    _nodeLicenseId: BigInt,
    _challengeId: BigInt,
    _boostFactor: BigInt,
    _confirmData: Bytes,
    _challengerSignedHash: Bytes,
  ): ethereum.CallResult<Referee__createAssertionHashAndCheckPayoutResult> {
    let result = super.tryCall(
      "createAssertionHashAndCheckPayout",
      "createAssertionHashAndCheckPayout(uint256,uint256,uint256,bytes,bytes):(bool,bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_nodeLicenseId),
        ethereum.Value.fromUnsignedBigInt(_challengeId),
        ethereum.Value.fromUnsignedBigInt(_boostFactor),
        ethereum.Value.fromBytes(_confirmData),
        ethereum.Value.fromBytes(_challengerSignedHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Referee__createAssertionHashAndCheckPayoutResult(
        value[0].toBoolean(),
        value[1].toBytes(),
      ),
    );
  }

  esXaiAddress(): Address {
    let result = super.call("esXaiAddress", "esXaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_esXaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("esXaiAddress", "esXaiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gasSubsidyRecipient(): Address {
    let result = super.call(
      "gasSubsidyRecipient",
      "gasSubsidyRecipient():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_gasSubsidyRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gasSubsidyRecipient",
      "gasSubsidyRecipient():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBoostFactorForStaker(staker: Address): BigInt {
    let result = super.call(
      "getBoostFactorForStaker",
      "getBoostFactorForStaker(address):(uint256)",
      [ethereum.Value.fromAddress(staker)],
    );

    return result[0].toBigInt();
  }

  try_getBoostFactorForStaker(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBoostFactorForStaker",
      "getBoostFactorForStaker(address):(uint256)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallenge(_challengeId: BigInt): Referee__getChallengeResultValue0Struct {
    let result = super.call(
      "getChallenge",
      "getChallenge(uint256):((bool,bool,uint64,bytes32,uint64,bytes,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)],
    );

    return changetype<Referee__getChallengeResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getChallenge(
    _challengeId: BigInt,
  ): ethereum.CallResult<Referee__getChallengeResultValue0Struct> {
    let result = super.tryCall(
      "getChallenge",
      "getChallenge(uint256):((bool,bool,uint64,bytes32,uint64,bytes,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Referee__getChallengeResultValue0Struct>(value[0].toTuple()),
    );
  }

  getCombinedTotalSupply(): BigInt {
    let result = super.call(
      "getCombinedTotalSupply",
      "getCombinedTotalSupply():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCombinedTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCombinedTotalSupply",
      "getCombinedTotalSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getKycWalletAtIndex(index: BigInt): Address {
    let result = super.call(
      "getKycWalletAtIndex",
      "getKycWalletAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_getKycWalletAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getKycWalletAtIndex",
      "getKycWalletAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getKycWalletCount(): BigInt {
    let result = super.call(
      "getKycWalletCount",
      "getKycWalletCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getKycWalletCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getKycWalletCount",
      "getKycWalletCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOperatorAtIndex(owner: Address, index: BigInt): Address {
    let result = super.call(
      "getOperatorAtIndex",
      "getOperatorAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toAddress();
  }

  try_getOperatorAtIndex(
    owner: Address,
    index: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperatorAtIndex",
      "getOperatorAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperatorCount(owner: Address): BigInt {
    let result = super.call(
      "getOperatorCount",
      "getOperatorCount(address):(uint256)",
      [ethereum.Value.fromAddress(owner)],
    );

    return result[0].toBigInt();
  }

  try_getOperatorCount(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorCount",
      "getOperatorCount(address):(uint256)",
      [ethereum.Value.fromAddress(owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnerCountForOperator(operator: Address): BigInt {
    let result = super.call(
      "getOwnerCountForOperator",
      "getOwnerCountForOperator(address):(uint256)",
      [ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBigInt();
  }

  try_getOwnerCountForOperator(operator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnerCountForOperator",
      "getOwnerCountForOperator(address):(uint256)",
      [ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnerForOperatorAtIndex(operator: Address, index: BigInt): Address {
    let result = super.call(
      "getOwnerForOperatorAtIndex",
      "getOwnerForOperatorAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toAddress();
  }

  try_getOwnerForOperatorAtIndex(
    operator: Address,
    index: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnerForOperatorAtIndex",
      "getOwnerForOperatorAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)],
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubmissionsForChallenges(
    _challengeIds: Array<BigInt>,
    _nodeLicenseId: BigInt,
  ): Array<Referee__getSubmissionsForChallengesResultValue0Struct> {
    let result = super.call(
      "getSubmissionsForChallenges",
      "getSubmissionsForChallenges(uint256[],uint256):((bool,bool,bool,uint256,bytes)[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_challengeIds),
        ethereum.Value.fromUnsignedBigInt(_nodeLicenseId),
      ],
    );

    return result[0].toTupleArray<Referee__getSubmissionsForChallengesResultValue0Struct>();
  }

  try_getSubmissionsForChallenges(
    _challengeIds: Array<BigInt>,
    _nodeLicenseId: BigInt,
  ): ethereum.CallResult<
    Array<Referee__getSubmissionsForChallengesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSubmissionsForChallenges",
      "getSubmissionsForChallenges(uint256[],uint256):((bool,bool,bool,uint256,bytes)[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_challengeIds),
        ethereum.Value.fromUnsignedBigInt(_nodeLicenseId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Referee__getSubmissionsForChallengesResultValue0Struct>(),
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForOperator(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForOperator",
      "isApprovedForOperator(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForOperator(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForOperator",
      "isApprovedForOperator(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCheckingAssertions(): boolean {
    let result = super.call(
      "isCheckingAssertions",
      "isCheckingAssertions():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isCheckingAssertions(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCheckingAssertions",
      "isCheckingAssertions():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKycApproved(wallet: Address): boolean {
    let result = super.call("isKycApproved", "isKycApproved(address):(bool)", [
      ethereum.Value.fromAddress(wallet),
    ]);

    return result[0].toBoolean();
  }

  try_isKycApproved(wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isKycApproved",
      "isKycApproved(address):(bool)",
      [ethereum.Value.fromAddress(wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxKeysPerPool(): BigInt {
    let result = super.call("maxKeysPerPool", "maxKeysPerPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxKeysPerPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxKeysPerPool",
      "maxKeysPerPool():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStakeAmountPerLicense(): BigInt {
    let result = super.call(
      "maxStakeAmountPerLicense",
      "maxStakeAmountPerLicense():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxStakeAmountPerLicense(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxStakeAmountPerLicense",
      "maxStakeAmountPerLicense():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeLicenseAddress(): Address {
    let result = super.call(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_nodeLicenseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFactoryAddress(): Address {
    let result = super.call(
      "poolFactoryAddress",
      "poolFactoryAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_poolFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolFactoryAddress",
      "poolFactoryAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolSubmissions(
    param0: BigInt,
    param1: Address,
  ): Referee__poolSubmissionsResult {
    let result = super.call(
      "poolSubmissions",
      "poolSubmissions(uint256,address):(bool,bool,uint256,uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return new Referee__poolSubmissionsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes(),
    );
  }

  try_poolSubmissions(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<Referee__poolSubmissionsResult> {
    let result = super.tryCall(
      "poolSubmissions",
      "poolSubmissions(uint256,address):(bool,bool,uint256,uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Referee__poolSubmissionsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes(),
      ),
    );
  }

  refereeCalculationsAddress(): Address {
    let result = super.call(
      "refereeCalculationsAddress",
      "refereeCalculationsAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_refereeCalculationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "refereeCalculationsAddress",
      "refereeCalculationsAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rollupAddress(): Address {
    let result = super.call("rollupAddress", "rollupAddress():(address)", []);

    return result[0].toAddress();
  }

  try_rollupAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rollupAddress",
      "rollupAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rollupAssertionTracker(param0: Bytes): boolean {
    let result = super.call(
      "rollupAssertionTracker",
      "rollupAssertionTracker(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_rollupAssertionTracker(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rollupAssertionTracker",
      "rollupAssertionTracker(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakeAmountBoostFactors(param0: BigInt): BigInt {
    let result = super.call(
      "stakeAmountBoostFactors",
      "stakeAmountBoostFactors(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakeAmountBoostFactors(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAmountBoostFactors",
      "stakeAmountBoostFactors(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAmountTierThresholds(param0: BigInt): BigInt {
    let result = super.call(
      "stakeAmountTierThresholds",
      "stakeAmountTierThresholds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakeAmountTierThresholds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAmountTierThresholds",
      "stakeAmountTierThresholds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedAmounts(param0: Address): BigInt {
    let result = super.call(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingEnabled(): boolean {
    let result = super.call("stakingEnabled", "stakingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_stakingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stakingEnabled", "stakingEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  submissions(param0: BigInt, param1: BigInt): Referee__submissionsResult {
    let result = super.call(
      "submissions",
      "submissions(uint256,uint256):(bool,bool,bool,uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new Referee__submissionsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBytes(),
    );
  }

  try_submissions(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<Referee__submissionsResult> {
    let result = super.tryCall(
      "submissions",
      "submissions(uint256,uint256):(bool,bool,bool,uint256,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Referee__submissionsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBytes(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xaiAddress(): Address {
    let result = super.call("xaiAddress", "xaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_xaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("xaiAddress", "xaiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddKycWalletCall extends ethereum.Call {
  get inputs(): AddKycWalletCall__Inputs {
    return new AddKycWalletCall__Inputs(this);
  }

  get outputs(): AddKycWalletCall__Outputs {
    return new AddKycWalletCall__Outputs(this);
  }
}

export class AddKycWalletCall__Inputs {
  _call: AddKycWalletCall;

  constructor(call: AddKycWalletCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddKycWalletCall__Outputs {
  _call: AddKycWalletCall;

  constructor(call: AddKycWalletCall) {
    this._call = call;
  }
}

export class ClaimMultipleRewardsCall extends ethereum.Call {
  get inputs(): ClaimMultipleRewardsCall__Inputs {
    return new ClaimMultipleRewardsCall__Inputs(this);
  }

  get outputs(): ClaimMultipleRewardsCall__Outputs {
    return new ClaimMultipleRewardsCall__Outputs(this);
  }
}

export class ClaimMultipleRewardsCall__Inputs {
  _call: ClaimMultipleRewardsCall;

  constructor(call: ClaimMultipleRewardsCall) {
    this._call = call;
  }

  get _nodeLicenseIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claimForAddressInBatch(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimMultipleRewardsCall__Outputs {
  _call: ClaimMultipleRewardsCall;

  constructor(call: ClaimMultipleRewardsCall) {
    this._call = call;
  }
}

export class ClaimPoolSubmissionRewardsCall extends ethereum.Call {
  get inputs(): ClaimPoolSubmissionRewardsCall__Inputs {
    return new ClaimPoolSubmissionRewardsCall__Inputs(this);
  }

  get outputs(): ClaimPoolSubmissionRewardsCall__Outputs {
    return new ClaimPoolSubmissionRewardsCall__Outputs(this);
  }
}

export class ClaimPoolSubmissionRewardsCall__Inputs {
  _call: ClaimPoolSubmissionRewardsCall;

  constructor(call: ClaimPoolSubmissionRewardsCall) {
    this._call = call;
  }

  get _poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimPoolSubmissionRewardsCall__Outputs {
  _call: ClaimPoolSubmissionRewardsCall;

  constructor(call: ClaimPoolSubmissionRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get _nodeLicenseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ExpireChallengeRewardsCall extends ethereum.Call {
  get inputs(): ExpireChallengeRewardsCall__Inputs {
    return new ExpireChallengeRewardsCall__Inputs(this);
  }

  get outputs(): ExpireChallengeRewardsCall__Outputs {
    return new ExpireChallengeRewardsCall__Outputs(this);
  }
}

export class ExpireChallengeRewardsCall__Inputs {
  _call: ExpireChallengeRewardsCall;

  constructor(call: ExpireChallengeRewardsCall) {
    this._call = call;
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExpireChallengeRewardsCall__Outputs {
  _call: ExpireChallengeRewardsCall;

  constructor(call: ExpireChallengeRewardsCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _refereeCalculationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveKycWalletCall extends ethereum.Call {
  get inputs(): RemoveKycWalletCall__Inputs {
    return new RemoveKycWalletCall__Inputs(this);
  }

  get outputs(): RemoveKycWalletCall__Outputs {
    return new RemoveKycWalletCall__Outputs(this);
  }
}

export class RemoveKycWalletCall__Inputs {
  _call: RemoveKycWalletCall;

  constructor(call: RemoveKycWalletCall) {
    this._call = call;
  }

  get wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveKycWalletCall__Outputs {
  _call: RemoveKycWalletCall;

  constructor(call: RemoveKycWalletCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetApprovalForOperatorCall extends ethereum.Call {
  get inputs(): SetApprovalForOperatorCall__Inputs {
    return new SetApprovalForOperatorCall__Inputs(this);
  }

  get outputs(): SetApprovalForOperatorCall__Outputs {
    return new SetApprovalForOperatorCall__Outputs(this);
  }
}

export class SetApprovalForOperatorCall__Inputs {
  _call: SetApprovalForOperatorCall;

  constructor(call: SetApprovalForOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForOperatorCall__Outputs {
  _call: SetApprovalForOperatorCall;

  constructor(call: SetApprovalForOperatorCall) {
    this._call = call;
  }
}

export class SetStakingEnabledCall extends ethereum.Call {
  get inputs(): SetStakingEnabledCall__Inputs {
    return new SetStakingEnabledCall__Inputs(this);
  }

  get outputs(): SetStakingEnabledCall__Outputs {
    return new SetStakingEnabledCall__Outputs(this);
  }
}

export class SetStakingEnabledCall__Inputs {
  _call: SetStakingEnabledCall;

  constructor(call: SetStakingEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStakingEnabledCall__Outputs {
  _call: SetStakingEnabledCall;

  constructor(call: SetStakingEnabledCall) {
    this._call = call;
  }
}

export class StakeEsXaiCall extends ethereum.Call {
  get inputs(): StakeEsXaiCall__Inputs {
    return new StakeEsXaiCall__Inputs(this);
  }

  get outputs(): StakeEsXaiCall__Outputs {
    return new StakeEsXaiCall__Outputs(this);
  }
}

export class StakeEsXaiCall__Inputs {
  _call: StakeEsXaiCall;

  constructor(call: StakeEsXaiCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeEsXaiCall__Outputs {
  _call: StakeEsXaiCall;

  constructor(call: StakeEsXaiCall) {
    this._call = call;
  }
}

export class StakeKeysCall extends ethereum.Call {
  get inputs(): StakeKeysCall__Inputs {
    return new StakeKeysCall__Inputs(this);
  }

  get outputs(): StakeKeysCall__Outputs {
    return new StakeKeysCall__Outputs(this);
  }
}

export class StakeKeysCall__Inputs {
  _call: StakeKeysCall;

  constructor(call: StakeKeysCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get keyIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get isAdminStake(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class StakeKeysCall__Outputs {
  _call: StakeKeysCall;

  constructor(call: StakeKeysCall) {
    this._call = call;
  }
}

export class SubmitAssertionToChallengeCall extends ethereum.Call {
  get inputs(): SubmitAssertionToChallengeCall__Inputs {
    return new SubmitAssertionToChallengeCall__Inputs(this);
  }

  get outputs(): SubmitAssertionToChallengeCall__Outputs {
    return new SubmitAssertionToChallengeCall__Outputs(this);
  }
}

export class SubmitAssertionToChallengeCall__Inputs {
  _call: SubmitAssertionToChallengeCall;

  constructor(call: SubmitAssertionToChallengeCall) {
    this._call = call;
  }

  get _nodeLicenseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _confirmData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitAssertionToChallengeCall__Outputs {
  _call: SubmitAssertionToChallengeCall;

  constructor(call: SubmitAssertionToChallengeCall) {
    this._call = call;
  }
}

export class SubmitChallengeCall extends ethereum.Call {
  get inputs(): SubmitChallengeCall__Inputs {
    return new SubmitChallengeCall__Inputs(this);
  }

  get outputs(): SubmitChallengeCall__Outputs {
    return new SubmitChallengeCall__Outputs(this);
  }
}

export class SubmitChallengeCall__Inputs {
  _call: SubmitChallengeCall;

  constructor(call: SubmitChallengeCall) {
    this._call = call;
  }

  get _assertionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _predecessorAssertionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _confirmData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _assertionTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _challengerSignedHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SubmitChallengeCall__Outputs {
  _call: SubmitChallengeCall;

  constructor(call: SubmitChallengeCall) {
    this._call = call;
  }
}

export class SubmitMultipleAssertionsCall extends ethereum.Call {
  get inputs(): SubmitMultipleAssertionsCall__Inputs {
    return new SubmitMultipleAssertionsCall__Inputs(this);
  }

  get outputs(): SubmitMultipleAssertionsCall__Outputs {
    return new SubmitMultipleAssertionsCall__Outputs(this);
  }
}

export class SubmitMultipleAssertionsCall__Inputs {
  _call: SubmitMultipleAssertionsCall;

  constructor(call: SubmitMultipleAssertionsCall) {
    this._call = call;
  }

  get _nodeLicenseIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _confirmData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitMultipleAssertionsCall__Outputs {
  _call: SubmitMultipleAssertionsCall;

  constructor(call: SubmitMultipleAssertionsCall) {
    this._call = call;
  }
}

export class SubmitPoolAssertionCall extends ethereum.Call {
  get inputs(): SubmitPoolAssertionCall__Inputs {
    return new SubmitPoolAssertionCall__Inputs(this);
  }

  get outputs(): SubmitPoolAssertionCall__Outputs {
    return new SubmitPoolAssertionCall__Outputs(this);
  }
}

export class SubmitPoolAssertionCall__Inputs {
  _call: SubmitPoolAssertionCall;

  constructor(call: SubmitPoolAssertionCall) {
    this._call = call;
  }

  get _poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _confirmData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitPoolAssertionCall__Outputs {
  _call: SubmitPoolAssertionCall;

  constructor(call: SubmitPoolAssertionCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeEsXaiCall extends ethereum.Call {
  get inputs(): UnstakeEsXaiCall__Inputs {
    return new UnstakeEsXaiCall__Inputs(this);
  }

  get outputs(): UnstakeEsXaiCall__Outputs {
    return new UnstakeEsXaiCall__Outputs(this);
  }
}

export class UnstakeEsXaiCall__Inputs {
  _call: UnstakeEsXaiCall;

  constructor(call: UnstakeEsXaiCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeEsXaiCall__Outputs {
  _call: UnstakeEsXaiCall;

  constructor(call: UnstakeEsXaiCall) {
    this._call = call;
  }
}

export class UnstakeKeysCall extends ethereum.Call {
  get inputs(): UnstakeKeysCall__Inputs {
    return new UnstakeKeysCall__Inputs(this);
  }

  get outputs(): UnstakeKeysCall__Outputs {
    return new UnstakeKeysCall__Outputs(this);
  }
}

export class UnstakeKeysCall__Inputs {
  _call: UnstakeKeysCall;

  constructor(call: UnstakeKeysCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get keyIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UnstakeKeysCall__Outputs {
  _call: UnstakeKeysCall;

  constructor(call: UnstakeKeysCall) {
    this._call = call;
  }
}
