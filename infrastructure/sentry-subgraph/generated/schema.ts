// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class RedemptionRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedemptionRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedemptionRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedemptionRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedemptionRequest | null {
    return changetype<RedemptionRequest | null>(
      store.get_in_block("RedemptionRequest", id),
    );
  }

  static load(id: string): RedemptionRequest | null {
    return changetype<RedemptionRequest | null>(
      store.get("RedemptionRequest", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sentryWallet(): string {
    let value = this.get("sentryWallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sentryWallet(value: string) {
    this.set("sentryWallet", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get claimableTime(): BigInt {
    let value = this.get("claimableTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimableTime(value: BigInt) {
    this.set("claimableTime", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get completed(): boolean {
    let value = this.get("completed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get voucherIssued(): boolean {
    let value = this.get("voucherIssued");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set voucherIssued(value: boolean) {
    this.set("voucherIssued", Value.fromBoolean(value));
  }
}

export class SentryKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SentryKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SentryKey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SentryKey", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SentryKey | null {
    return changetype<SentryKey | null>(store.get_in_block("SentryKey", id));
  }

  static load(id: string): SentryKey | null {
    return changetype<SentryKey | null>(store.get("SentryKey", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get sentryWallet(): string {
    let value = this.get("sentryWallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sentryWallet(value: string) {
    this.set("sentryWallet", Value.fromString(value));
  }

  get keyId(): BigInt {
    let value = this.get("keyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set keyId(value: BigInt) {
    this.set("keyId", Value.fromBigInt(value));
  }

  get mintTimeStamp(): BigInt {
    let value = this.get("mintTimeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintTimeStamp(value: BigInt) {
    this.set("mintTimeStamp", Value.fromBigInt(value));
  }

  get assignedPool(): Bytes {
    let value = this.get("assignedPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assignedPool(value: Bytes) {
    this.set("assignedPool", Value.fromBytes(value));
  }

  get submissions(): SubmissionLoader {
    return new SubmissionLoader(
      "SentryKey",
      this.get("id")!.toString(),
      "submissions",
    );
  }
}

export class PoolInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolInfo | null {
    return changetype<PoolInfo | null>(store.get_in_block("PoolInfo", id));
  }

  static load(id: string): PoolInfo | null {
    return changetype<PoolInfo | null>(store.get("PoolInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get delegateAddress(): Bytes {
    let value = this.get("delegateAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set delegateAddress(value: Bytes) {
    this.set("delegateAddress", Value.fromBytes(value));
  }

  get totalStakedEsXaiAmount(): BigInt {
    let value = this.get("totalStakedEsXaiAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedEsXaiAmount(value: BigInt) {
    this.set("totalStakedEsXaiAmount", Value.fromBigInt(value));
  }

  get totalStakedKeyAmount(): BigInt {
    let value = this.get("totalStakedKeyAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedKeyAmount(value: BigInt) {
    this.set("totalStakedKeyAmount", Value.fromBigInt(value));
  }

  get ownerShare(): BigInt {
    let value = this.get("ownerShare");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ownerShare(value: BigInt) {
    this.set("ownerShare", Value.fromBigInt(value));
  }

  get keyBucketShare(): BigInt {
    let value = this.get("keyBucketShare");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set keyBucketShare(value: BigInt) {
    this.set("keyBucketShare", Value.fromBigInt(value));
  }

  get stakedBucketShare(): BigInt {
    let value = this.get("stakedBucketShare");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedBucketShare(value: BigInt) {
    this.set("stakedBucketShare", Value.fromBigInt(value));
  }

  get updateSharesTimestamp(): BigInt {
    let value = this.get("updateSharesTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateSharesTimestamp(value: BigInt) {
    this.set("updateSharesTimestamp", Value.fromBigInt(value));
  }

  get pendingShares(): Array<BigInt> {
    let value = this.get("pendingShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set pendingShares(value: Array<BigInt>) {
    this.set("pendingShares", Value.fromBigIntArray(value));
  }

  get metadata(): Array<string> {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set metadata(value: Array<string>) {
    this.set("metadata", Value.fromStringArray(value));
  }

  get socials(): Array<string> {
    let value = this.get("socials");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set socials(value: Array<string>) {
    this.set("socials", Value.fromStringArray(value));
  }

  get ownerStakedKeys(): BigInt {
    let value = this.get("ownerStakedKeys");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ownerStakedKeys(value: BigInt) {
    this.set("ownerStakedKeys", Value.fromBigInt(value));
  }

  get ownerRequestedUnstakeKeyAmount(): BigInt {
    let value = this.get("ownerRequestedUnstakeKeyAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ownerRequestedUnstakeKeyAmount(value: BigInt) {
    this.set("ownerRequestedUnstakeKeyAmount", Value.fromBigInt(value));
  }

  get ownerLatestUnstakeRequestCompletionTime(): BigInt {
    let value = this.get("ownerLatestUnstakeRequestCompletionTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ownerLatestUnstakeRequestCompletionTime(value: BigInt) {
    this.set(
      "ownerLatestUnstakeRequestCompletionTime",
      Value.fromBigInt(value),
    );
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get poolChallenges(): PoolChallengeLoader {
    return new PoolChallengeLoader(
      "PoolInfo",
      this.get("id")!.toString(),
      "poolChallenges",
    );
  }

  get submissions(): BulkSubmissionLoader {
    return new BulkSubmissionLoader(
      "PoolInfo",
      this.get("id")!.toString(),
      "submissions",
    );
  }
}

export class UnstakeRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnstakeRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UnstakeRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UnstakeRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UnstakeRequest | null {
    return changetype<UnstakeRequest | null>(
      store.get_in_block("UnstakeRequest", id),
    );
  }

  static load(id: string): UnstakeRequest | null {
    return changetype<UnstakeRequest | null>(store.get("UnstakeRequest", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get isKey(): boolean {
    let value = this.get("isKey");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isKey(value: boolean) {
    this.set("isKey", Value.fromBoolean(value));
  }

  get open(): boolean {
    let value = this.get("open");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set open(value: boolean) {
    this.set("open", Value.fromBoolean(value));
  }

  get lockTime(): BigInt {
    let value = this.get("lockTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lockTime(value: BigInt) {
    this.set("lockTime", Value.fromBigInt(value));
  }

  get completeTime(): BigInt {
    let value = this.get("completeTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set completeTime(value: BigInt) {
    this.set("completeTime", Value.fromBigInt(value));
  }
}

export class PoolFactoryConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolFactoryConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolFactoryConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolFactoryConfig", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolFactoryConfig | null {
    return changetype<PoolFactoryConfig | null>(
      store.get_in_block("PoolFactoryConfig", id),
    );
  }

  static load(id: string): PoolFactoryConfig | null {
    return changetype<PoolFactoryConfig | null>(
      store.get("PoolFactoryConfig", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get unstakeKeysDelayPeriod(): BigInt {
    let value = this.get("unstakeKeysDelayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unstakeKeysDelayPeriod(value: BigInt) {
    this.set("unstakeKeysDelayPeriod", Value.fromBigInt(value));
  }

  get unstakeGenesisKeyDelayPeriod(): BigInt {
    let value = this.get("unstakeGenesisKeyDelayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unstakeGenesisKeyDelayPeriod(value: BigInt) {
    this.set("unstakeGenesisKeyDelayPeriod", Value.fromBigInt(value));
  }

  get unstakeEsXaiDelayPeriod(): BigInt {
    let value = this.get("unstakeEsXaiDelayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unstakeEsXaiDelayPeriod(value: BigInt) {
    this.set("unstakeEsXaiDelayPeriod", Value.fromBigInt(value));
  }

  get updateRewardBreakdownDelayPeriod(): BigInt {
    let value = this.get("updateRewardBreakdownDelayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateRewardBreakdownDelayPeriod(value: BigInt) {
    this.set("updateRewardBreakdownDelayPeriod", Value.fromBigInt(value));
  }
}

export class PoolChallenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolChallenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolChallenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolChallenge", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolChallenge | null {
    return changetype<PoolChallenge | null>(
      store.get_in_block("PoolChallenge", id),
    );
  }

  static load(id: string): PoolChallenge | null {
    return changetype<PoolChallenge | null>(store.get("PoolChallenge", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get challenge(): string {
    let value = this.get("challenge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challenge(value: string) {
    this.set("challenge", Value.fromString(value));
  }

  get submittedKeyCount(): BigInt {
    let value = this.get("submittedKeyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submittedKeyCount(value: BigInt) {
    this.set("submittedKeyCount", Value.fromBigInt(value));
  }

  get claimKeyCount(): BigInt {
    let value = this.get("claimKeyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimKeyCount(value: BigInt) {
    this.set("claimKeyCount", Value.fromBigInt(value));
  }

  get totalStakedEsXaiAmount(): BigInt {
    let value = this.get("totalStakedEsXaiAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedEsXaiAmount(value: BigInt) {
    this.set("totalStakedEsXaiAmount", Value.fromBigInt(value));
  }

  get totalStakedKeyAmount(): BigInt {
    let value = this.get("totalStakedKeyAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedKeyAmount(value: BigInt) {
    this.set("totalStakedKeyAmount", Value.fromBigInt(value));
  }

  get totalClaimedEsXaiAmount(): BigInt {
    let value = this.get("totalClaimedEsXaiAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaimedEsXaiAmount(value: BigInt) {
    this.set("totalClaimedEsXaiAmount", Value.fromBigInt(value));
  }

  get eligibleSubmissionsCount(): BigInt {
    let value = this.get("eligibleSubmissionsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eligibleSubmissionsCount(value: BigInt) {
    this.set("eligibleSubmissionsCount", Value.fromBigInt(value));
  }
}

export class PoolStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolStake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolStake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolStake", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolStake | null {
    return changetype<PoolStake | null>(store.get_in_block("PoolStake", id));
  }

  static load(id: string): PoolStake | null {
    return changetype<PoolStake | null>(store.get("PoolStake", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get keyStakeAmount(): BigInt {
    let value = this.get("keyStakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set keyStakeAmount(value: BigInt) {
    this.set("keyStakeAmount", Value.fromBigInt(value));
  }

  get esXaiStakeAmount(): BigInt {
    let value = this.get("esXaiStakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set esXaiStakeAmount(value: BigInt) {
    this.set("esXaiStakeAmount", Value.fromBigInt(value));
  }
}

export class Challenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Challenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Challenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Challenge", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Challenge | null {
    return changetype<Challenge | null>(store.get_in_block("Challenge", id));
  }

  static load(id: string): Challenge | null {
    return changetype<Challenge | null>(store.get("Challenge", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeNumber(): BigInt {
    let value = this.get("challengeNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeNumber(value: BigInt) {
    this.set("challengeNumber", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get assertionId(): BigInt {
    let value = this.get("assertionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assertionId(value: BigInt) {
    this.set("assertionId", Value.fromBigInt(value));
  }

  get assertionStateRootOrConfirmData(): Bytes {
    let value = this.get("assertionStateRootOrConfirmData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assertionStateRootOrConfirmData(value: Bytes) {
    this.set("assertionStateRootOrConfirmData", Value.fromBytes(value));
  }

  get assertionTimestamp(): BigInt {
    let value = this.get("assertionTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assertionTimestamp(value: BigInt) {
    this.set("assertionTimestamp", Value.fromBigInt(value));
  }

  get challengerSignedHash(): Bytes {
    let value = this.get("challengerSignedHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set challengerSignedHash(value: Bytes) {
    this.set("challengerSignedHash", Value.fromBytes(value));
  }

  get activeChallengerPublicKey(): Bytes {
    let value = this.get("activeChallengerPublicKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set activeChallengerPublicKey(value: Bytes) {
    this.set("activeChallengerPublicKey", Value.fromBytes(value));
  }

  get rollupUsed(): Bytes {
    let value = this.get("rollupUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rollupUsed(value: Bytes) {
    this.set("rollupUsed", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get totalSupplyOfNodesAtChallengeStart(): BigInt {
    let value = this.get("totalSupplyOfNodesAtChallengeStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupplyOfNodesAtChallengeStart(value: BigInt) {
    this.set("totalSupplyOfNodesAtChallengeStart", Value.fromBigInt(value));
  }

  get rewardAmountForClaimers(): BigInt {
    let value = this.get("rewardAmountForClaimers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmountForClaimers(value: BigInt) {
    this.set("rewardAmountForClaimers", Value.fromBigInt(value));
  }

  get amountForGasSubsidy(): BigInt {
    let value = this.get("amountForGasSubsidy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountForGasSubsidy(value: BigInt) {
    this.set("amountForGasSubsidy", Value.fromBigInt(value));
  }

  get numberOfEligibleClaimers(): BigInt {
    let value = this.get("numberOfEligibleClaimers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfEligibleClaimers(value: BigInt) {
    this.set("numberOfEligibleClaimers", Value.fromBigInt(value));
  }

  get amountClaimedByClaimers(): BigInt {
    let value = this.get("amountClaimedByClaimers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountClaimedByClaimers(value: BigInt) {
    this.set("amountClaimedByClaimers", Value.fromBigInt(value));
  }

  get submissions(): SubmissionLoader {
    return new SubmissionLoader(
      "Challenge",
      this.get("id")!.toString(),
      "submissions",
    );
  }

  get bulkSubmissions(): BulkSubmissionLoader {
    return new BulkSubmissionLoader(
      "Challenge",
      this.get("id")!.toString(),
      "bulkSubmissions",
    );
  }
}

export class Submission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Submission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Submission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Submission", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Submission | null {
    return changetype<Submission | null>(store.get_in_block("Submission", id));
  }

  static load(id: string): Submission | null {
    return changetype<Submission | null>(store.get("Submission", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeNumber(): BigInt {
    let value = this.get("challengeNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeNumber(value: BigInt) {
    this.set("challengeNumber", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get eligibleForPayout(): boolean {
    let value = this.get("eligibleForPayout");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set eligibleForPayout(value: boolean) {
    this.set("eligibleForPayout", Value.fromBoolean(value));
  }

  get nodeLicenseId(): BigInt {
    let value = this.get("nodeLicenseId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nodeLicenseId(value: BigInt) {
    this.set("nodeLicenseId", Value.fromBigInt(value));
  }

  get assertionsStateRootOrConfirmData(): string {
    let value = this.get("assertionsStateRootOrConfirmData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set assertionsStateRootOrConfirmData(value: string) {
    this.set("assertionsStateRootOrConfirmData", Value.fromString(value));
  }

  get claimAmount(): BigInt {
    let value = this.get("claimAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimAmount(value: BigInt) {
    this.set("claimAmount", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get claimTimestamp(): BigInt {
    let value = this.get("claimTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimTimestamp(value: BigInt) {
    this.set("claimTimestamp", Value.fromBigInt(value));
  }

  get createdTxHash(): Bytes {
    let value = this.get("createdTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdTxHash(value: Bytes) {
    this.set("createdTxHash", Value.fromBytes(value));
  }

  get claimTxHash(): Bytes {
    let value = this.get("claimTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set claimTxHash(value: Bytes) {
    this.set("claimTxHash", Value.fromBytes(value));
  }

  get sentryKey(): string {
    let value = this.get("sentryKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sentryKey(value: string) {
    this.set("sentryKey", Value.fromString(value));
  }

  get challenge(): string {
    let value = this.get("challenge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challenge(value: string) {
    this.set("challenge", Value.fromString(value));
  }

  get submittedFrom(): string {
    let value = this.get("submittedFrom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set submittedFrom(value: string) {
    this.set("submittedFrom", Value.fromString(value));
  }

  get claimedFrom(): string {
    let value = this.get("claimedFrom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set claimedFrom(value: string) {
    this.set("claimedFrom", Value.fromString(value));
  }
}

export class SentryWallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SentryWallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SentryWallet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SentryWallet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SentryWallet | null {
    return changetype<SentryWallet | null>(
      store.get_in_block("SentryWallet", id),
    );
  }

  static load(id: string): SentryWallet | null {
    return changetype<SentryWallet | null>(store.get("SentryWallet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isKYCApproved(): boolean {
    let value = this.get("isKYCApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isKYCApproved(value: boolean) {
    this.set("isKYCApproved", Value.fromBoolean(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get approvedOperators(): Array<Bytes> {
    let value = this.get("approvedOperators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set approvedOperators(value: Array<Bytes>) {
    this.set("approvedOperators", Value.fromBytesArray(value));
  }

  get v1EsXaiStakeAmount(): BigInt {
    let value = this.get("v1EsXaiStakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set v1EsXaiStakeAmount(value: BigInt) {
    this.set("v1EsXaiStakeAmount", Value.fromBigInt(value));
  }

  get esXaiStakeAmount(): BigInt {
    let value = this.get("esXaiStakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set esXaiStakeAmount(value: BigInt) {
    this.set("esXaiStakeAmount", Value.fromBigInt(value));
  }

  get keyCount(): BigInt {
    let value = this.get("keyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set keyCount(value: BigInt) {
    this.set("keyCount", Value.fromBigInt(value));
  }

  get stakedKeyCount(): BigInt {
    let value = this.get("stakedKeyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedKeyCount(value: BigInt) {
    this.set("stakedKeyCount", Value.fromBigInt(value));
  }

  get esXaiBalance(): BigInt {
    let value = this.get("esXaiBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set esXaiBalance(value: BigInt) {
    this.set("esXaiBalance", Value.fromBigInt(value));
  }

  get sentryKeys(): SentryKeyLoader {
    return new SentryKeyLoader(
      "SentryWallet",
      this.get("id")!.toString(),
      "sentryKeys",
    );
  }

  get poolStakes(): PoolStakeLoader {
    return new PoolStakeLoader(
      "SentryWallet",
      this.get("id")!.toString(),
      "poolStakes",
    );
  }

  get bulkSubmissions(): BulkSubmissionLoader {
    return new BulkSubmissionLoader(
      "SentryWallet",
      this.get("id")!.toString(),
      "bulkSubmissions",
    );
  }

  get redemptions(): RedemptionRequestLoader {
    return new RedemptionRequestLoader(
      "SentryWallet",
      this.get("id")!.toString(),
      "redemptions",
    );
  }
}

export class RefereeConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RefereeConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RefereeConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RefereeConfig", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RefereeConfig | null {
    return changetype<RefereeConfig | null>(
      store.get_in_block("RefereeConfig", id),
    );
  }

  static load(id: string): RefereeConfig | null {
    return changetype<RefereeConfig | null>(store.get("RefereeConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get maxStakeAmountPerLicense(): BigInt {
    let value = this.get("maxStakeAmountPerLicense");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxStakeAmountPerLicense(value: BigInt) {
    this.set("maxStakeAmountPerLicense", Value.fromBigInt(value));
  }

  get maxKeysPerPool(): BigInt {
    let value = this.get("maxKeysPerPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxKeysPerPool(value: BigInt) {
    this.set("maxKeysPerPool", Value.fromBigInt(value));
  }

  get stakeAmountTierThresholds(): Array<BigInt> {
    let value = this.get("stakeAmountTierThresholds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set stakeAmountTierThresholds(value: Array<BigInt>) {
    this.set("stakeAmountTierThresholds", Value.fromBigIntArray(value));
  }

  get stakeAmountBoostFactors(): Array<BigInt> {
    let value = this.get("stakeAmountBoostFactors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set stakeAmountBoostFactors(value: Array<BigInt>) {
    this.set("stakeAmountBoostFactors", Value.fromBigIntArray(value));
  }
}

export class BulkSubmission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BulkSubmission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BulkSubmission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BulkSubmission", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BulkSubmission | null {
    return changetype<BulkSubmission | null>(
      store.get_in_block("BulkSubmission", id),
    );
  }

  static load(id: string): BulkSubmission | null {
    return changetype<BulkSubmission | null>(store.get("BulkSubmission", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get bulkAddress(): Bytes {
    let value = this.get("bulkAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bulkAddress(value: Bytes) {
    this.set("bulkAddress", Value.fromBytes(value));
  }

  get challenge(): string {
    let value = this.get("challenge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challenge(value: string) {
    this.set("challenge", Value.fromString(value));
  }

  get poolInfo(): string | null {
    let value = this.get("poolInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolInfo(value: string | null) {
    if (!value) {
      this.unset("poolInfo");
    } else {
      this.set("poolInfo", Value.fromString(<string>value));
    }
  }

  get keyCount(): BigInt {
    let value = this.get("keyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set keyCount(value: BigInt) {
    this.set("keyCount", Value.fromBigInt(value));
  }

  get winningKeyCount(): BigInt {
    let value = this.get("winningKeyCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set winningKeyCount(value: BigInt) {
    this.set("winningKeyCount", Value.fromBigInt(value));
  }

  get claimedRewardsAmount(): BigInt {
    let value = this.get("claimedRewardsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimedRewardsAmount(value: BigInt) {
    this.set("claimedRewardsAmount", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTxHash(): Bytes {
    let value = this.get("createdTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdTxHash(value: Bytes) {
    this.set("createdTxHash", Value.fromBytes(value));
  }

  get claimTimestamp(): BigInt {
    let value = this.get("claimTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimTimestamp(value: BigInt) {
    this.set("claimTimestamp", Value.fromBigInt(value));
  }

  get claimTxHash(): Bytes {
    let value = this.get("claimTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set claimTxHash(value: Bytes) {
    this.set("claimTxHash", Value.fromBytes(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get sentryWallet(): string | null {
    let value = this.get("sentryWallet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sentryWallet(value: string | null) {
    if (!value) {
      this.unset("sentryWallet");
    } else {
      this.set("sentryWallet", Value.fromString(<string>value));
    }
  }

  get isPool(): boolean {
    let value = this.get("isPool");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPool(value: boolean) {
    this.set("isPool", Value.fromBoolean(value));
  }
}

export class ConvertedToEsXaiEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ConvertedToEsXaiEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ConvertedToEsXaiEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ConvertedToEsXaiEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ConvertedToEsXaiEvent | null {
    return changetype<ConvertedToEsXaiEvent | null>(
      store.get_in_block("ConvertedToEsXaiEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): ConvertedToEsXaiEvent | null {
    return changetype<ConvertedToEsXaiEvent | null>(
      store.get("ConvertedToEsXaiEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SubmissionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Submission[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Submission[]>(value);
  }
}

export class PoolChallengeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolChallenge[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolChallenge[]>(value);
  }
}

export class BulkSubmissionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BulkSubmission[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BulkSubmission[]>(value);
  }
}

export class SentryKeyLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SentryKey[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SentryKey[]>(value);
  }
}

export class PoolStakeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolStake[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolStake[]>(value);
  }
}

export class RedemptionRequestLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedemptionRequest[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedemptionRequest[]>(value);
  }
}
