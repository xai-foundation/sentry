// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FoundationBasepointsUpdated extends ethereum.Event {
  get params(): FoundationBasepointsUpdated__Params {
    return new FoundationBasepointsUpdated__Params(this);
  }
}

export class FoundationBasepointsUpdated__Params {
  _event: FoundationBasepointsUpdated;

  constructor(event: FoundationBasepointsUpdated) {
    this._event = event;
  }

  get newBasepoints(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RedemptionCancelled extends ethereum.Event {
  get params(): RedemptionCancelled__Params {
    return new RedemptionCancelled__Params(this);
  }
}

export class RedemptionCancelled__Params {
  _event: RedemptionCancelled;

  constructor(event: RedemptionCancelled) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedemptionCompleted extends ethereum.Event {
  get params(): RedemptionCompleted__Params {
    return new RedemptionCompleted__Params(this);
  }
}

export class RedemptionCompleted__Params {
  _event: RedemptionCompleted;

  constructor(event: RedemptionCompleted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedemptionStarted extends ethereum.Event {
  get params(): RedemptionStarted__Params {
    return new RedemptionStarted__Params(this);
  }
}

export class RedemptionStarted__Params {
  _event: RedemptionStarted;

  constructor(event: RedemptionStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedemptionStatusChanged extends ethereum.Event {
  get params(): RedemptionStatusChanged__Params {
    return new RedemptionStatusChanged__Params(this);
  }
}

export class RedemptionStatusChanged__Params {
  _event: RedemptionStatusChanged;

  constructor(event: RedemptionStatusChanged) {
    this._event = event;
  }

  get isActive(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VoucherIssued extends ethereum.Event {
  get params(): VoucherIssued__Params {
    return new VoucherIssued__Params(this);
  }
}

export class VoucherIssued__Params {
  _event: VoucherIssued;

  constructor(event: VoucherIssued) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indices(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class WhitelistUpdated extends ethereum.Event {
  get params(): WhitelistUpdated__Params {
    return new WhitelistUpdated__Params(this);
  }
}

export class WhitelistUpdated__Params {
  _event: WhitelistUpdated;

  constructor(event: WhitelistUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdded(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class XaiAddressChanged extends ethereum.Event {
  get params(): XaiAddressChanged__Params {
    return new XaiAddressChanged__Params(this);
  }
}

export class XaiAddressChanged__Params {
  _event: XaiAddressChanged;

  constructor(event: XaiAddressChanged) {
    this._event = event;
  }

  get newXaiAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class esXai__getRedemptionRequestResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get completed(): boolean {
    return this[4].toBoolean();
  }

  get cancelled(): boolean {
    return this[5].toBoolean();
  }

  get voucherIssued(): boolean {
    return this[6].toBoolean();
  }

  get __gap(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class esXai extends ethereum.SmartContract {
  static bind(address: Address): esXai {
    return new esXai("esXai", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _totalPendingRedemptions(param0: Address): BigInt {
    let result = super.call(
      "_totalPendingRedemptions",
      "_totalPendingRedemptions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try__totalPendingRedemptions(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_totalPendingRedemptions",
      "_totalPendingRedemptions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  esXaiBurnFoundationBasePoints(): BigInt {
    let result = super.call(
      "esXaiBurnFoundationBasePoints",
      "esXaiBurnFoundationBasePoints():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_esXaiBurnFoundationBasePoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "esXaiBurnFoundationBasePoints",
      "esXaiBurnFoundationBasePoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  esXaiBurnFoundationRecipient(): Address {
    let result = super.call(
      "esXaiBurnFoundationRecipient",
      "esXaiBurnFoundationRecipient():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_esXaiBurnFoundationRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "esXaiBurnFoundationRecipient",
      "esXaiBurnFoundationRecipient():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRedemptionRequest(
    account: Address,
    index: BigInt,
  ): esXai__getRedemptionRequestResultValue0Struct {
    let result = super.call(
      "getRedemptionRequest",
      "getRedemptionRequest(address,uint256):((uint256,uint256,uint256,uint256,bool,bool,bool,uint256[5]))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return changetype<esXai__getRedemptionRequestResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRedemptionRequest(
    account: Address,
    index: BigInt,
  ): ethereum.CallResult<esXai__getRedemptionRequestResultValue0Struct> {
    let result = super.tryCall(
      "getRedemptionRequest",
      "getRedemptionRequest(address,uint256):((uint256,uint256,uint256,uint256,bool,bool,bool,uint256[5]))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<esXai__getRedemptionRequestResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getRedemptionRequestCount(account: Address): BigInt {
    let result = super.call(
      "getRedemptionRequestCount",
      "getRedemptionRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRequestCount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRequestCount",
      "getRedemptionRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getWhitelistCount(): BigInt {
    let result = super.call(
      "getWhitelistCount",
      "getWhitelistCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getWhitelistCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWhitelistCount",
      "getWhitelistCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWhitelistedAddressAtIndex(index: BigInt): Address {
    let result = super.call(
      "getWhitelistedAddressAtIndex",
      "getWhitelistedAddressAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_getWhitelistedAddressAtIndex(
    index: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWhitelistedAddressAtIndex",
      "getWhitelistedAddressAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(account: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxKeysNonKyc(): BigInt {
    let result = super.call("maxKeysNonKyc", "maxKeysNonKyc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxKeysNonKyc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxKeysNonKyc",
      "maxKeysNonKyc():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nodeLicenseAddress(): Address {
    let result = super.call(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_nodeLicenseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFactoryAddress(): Address {
    let result = super.call(
      "poolFactoryAddress",
      "poolFactoryAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_poolFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolFactoryAddress",
      "poolFactoryAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refereeAddress(): Address {
    let result = super.call("refereeAddress", "refereeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_refereeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "refereeAddress",
      "refereeAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xai(): Address {
    let result = super.call("xai", "xai():(address)", []);

    return result[0].toAddress();
  }

  try_xai(): ethereum.CallResult<Address> {
    let result = super.tryCall("xai", "xai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddToWhitelistCall extends ethereum.Call {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class CancelRedemptionCall extends ethereum.Call {
  get inputs(): CancelRedemptionCall__Inputs {
    return new CancelRedemptionCall__Inputs(this);
  }

  get outputs(): CancelRedemptionCall__Outputs {
    return new CancelRedemptionCall__Outputs(this);
  }
}

export class CancelRedemptionCall__Inputs {
  _call: CancelRedemptionCall;

  constructor(call: CancelRedemptionCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelRedemptionCall__Outputs {
  _call: CancelRedemptionCall;

  constructor(call: CancelRedemptionCall) {
    this._call = call;
  }
}

export class ChangeRedemptionStatusCall extends ethereum.Call {
  get inputs(): ChangeRedemptionStatusCall__Inputs {
    return new ChangeRedemptionStatusCall__Inputs(this);
  }

  get outputs(): ChangeRedemptionStatusCall__Outputs {
    return new ChangeRedemptionStatusCall__Outputs(this);
  }
}

export class ChangeRedemptionStatusCall__Inputs {
  _call: ChangeRedemptionStatusCall;

  constructor(call: ChangeRedemptionStatusCall) {
    this._call = call;
  }

  get isActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeRedemptionStatusCall__Outputs {
  _call: ChangeRedemptionStatusCall;

  constructor(call: ChangeRedemptionStatusCall) {
    this._call = call;
  }
}

export class ChangeXaiAddressCall extends ethereum.Call {
  get inputs(): ChangeXaiAddressCall__Inputs {
    return new ChangeXaiAddressCall__Inputs(this);
  }

  get outputs(): ChangeXaiAddressCall__Outputs {
    return new ChangeXaiAddressCall__Outputs(this);
  }
}

export class ChangeXaiAddressCall__Inputs {
  _call: ChangeXaiAddressCall;

  constructor(call: ChangeXaiAddressCall) {
    this._call = call;
  }

  get _newXai(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeXaiAddressCall__Outputs {
  _call: ChangeXaiAddressCall;

  constructor(call: ChangeXaiAddressCall) {
    this._call = call;
  }
}

export class CompleteRedemptionCall extends ethereum.Call {
  get inputs(): CompleteRedemptionCall__Inputs {
    return new CompleteRedemptionCall__Inputs(this);
  }

  get outputs(): CompleteRedemptionCall__Outputs {
    return new CompleteRedemptionCall__Outputs(this);
  }
}

export class CompleteRedemptionCall__Inputs {
  _call: CompleteRedemptionCall;

  constructor(call: CompleteRedemptionCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteRedemptionCall__Outputs {
  _call: CompleteRedemptionCall;

  constructor(call: CompleteRedemptionCall) {
    this._call = call;
  }
}

export class ConvertRedemptionsInProcessCall extends ethereum.Call {
  get inputs(): ConvertRedemptionsInProcessCall__Inputs {
    return new ConvertRedemptionsInProcessCall__Inputs(this);
  }

  get outputs(): ConvertRedemptionsInProcessCall__Outputs {
    return new ConvertRedemptionsInProcessCall__Outputs(this);
  }
}

export class ConvertRedemptionsInProcessCall__Inputs {
  _call: ConvertRedemptionsInProcessCall;

  constructor(call: ConvertRedemptionsInProcessCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get indices(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }
}

export class ConvertRedemptionsInProcessCall__Outputs {
  _call: ConvertRedemptionsInProcessCall;

  constructor(call: ConvertRedemptionsInProcessCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RemoveFromWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromWhitelistCall__Inputs {
    return new RemoveFromWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromWhitelistCall__Outputs {
    return new RemoveFromWhitelistCall__Outputs(this);
  }
}

export class RemoveFromWhitelistCall__Inputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromWhitelistCall__Outputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetMaxKeysNonKycCall extends ethereum.Call {
  get inputs(): SetMaxKeysNonKycCall__Inputs {
    return new SetMaxKeysNonKycCall__Inputs(this);
  }

  get outputs(): SetMaxKeysNonKycCall__Outputs {
    return new SetMaxKeysNonKycCall__Outputs(this);
  }
}

export class SetMaxKeysNonKycCall__Inputs {
  _call: SetMaxKeysNonKycCall;

  constructor(call: SetMaxKeysNonKycCall) {
    this._call = call;
  }

  get newMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxKeysNonKycCall__Outputs {
  _call: SetMaxKeysNonKycCall;

  constructor(call: SetMaxKeysNonKycCall) {
    this._call = call;
  }
}

export class StartRedemptionCall extends ethereum.Call {
  get inputs(): StartRedemptionCall__Inputs {
    return new StartRedemptionCall__Inputs(this);
  }

  get outputs(): StartRedemptionCall__Outputs {
    return new StartRedemptionCall__Outputs(this);
  }
}

export class StartRedemptionCall__Inputs {
  _call: StartRedemptionCall;

  constructor(call: StartRedemptionCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartRedemptionCall__Outputs {
  _call: StartRedemptionCall;

  constructor(call: StartRedemptionCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateFoundationBasepointsCall extends ethereum.Call {
  get inputs(): UpdateFoundationBasepointsCall__Inputs {
    return new UpdateFoundationBasepointsCall__Inputs(this);
  }

  get outputs(): UpdateFoundationBasepointsCall__Outputs {
    return new UpdateFoundationBasepointsCall__Outputs(this);
  }
}

export class UpdateFoundationBasepointsCall__Inputs {
  _call: UpdateFoundationBasepointsCall;

  constructor(call: UpdateFoundationBasepointsCall) {
    this._call = call;
  }

  get number(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFoundationBasepointsCall__Outputs {
  _call: UpdateFoundationBasepointsCall;

  constructor(call: UpdateFoundationBasepointsCall) {
    this._call = call;
  }
}
